{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { get_row, get_col, get_square } from '../common/helper_functions'; // 'checkGrid should be called - outputs a boolean confirmation if the sudoku grid meets completion criteria.\n\nvar IsSolutionCorrect = /*#__PURE__*/function () {\n  function IsSolutionCorrect() {\n    _classCallCheck(this, IsSolutionCorrect);\n  }\n\n  _createClass(IsSolutionCorrect, [{\n    key: \"checkGrid\",\n    value: function checkGrid(grid) {\n      return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\n    }\n  }, {\n    key: \"checkRows\",\n    value: function checkRows(grid) {\n      for (var rowIndex = 0; rowIndex < 9; rowIndex++) {\n        var row = get_row(grid, rowIndex);\n\n        if (!this.containsOneToNine(row)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkColumns\",\n    value: function checkColumns(grid) {\n      for (var columnIndex = 0; columnIndex < 9; columnIndex++) {\n        var column = get_col(grid, columnIndex);\n\n        if (!this.containsOneToNine(column)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkSquares\",\n    value: function checkSquares(grid) {\n      for (var squareIndex = 0; squareIndex < 9; squareIndex++) {\n        var square = get_square(grid, squareIndex);\n\n        if (!this.containsOneToNine(square)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"containsOneToNine\",\n    value: function containsOneToNine(numbers) {\n      for (var i = 1; i <= 9; i++) {\n        if (!numbers.includes(i)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return IsSolutionCorrect;\n}();\n\nexport default IsSolutionCorrect;","map":{"version":3,"sources":["C:/Users/alons/OneDrive/Documentos/Todos los proyectos descargados/react-sudoku-master/src/components/IsSolutionCorrect.js"],"names":["get_row","get_col","get_square","IsSolutionCorrect","grid","checkRows","checkColumns","checkSquares","rowIndex","row","containsOneToNine","columnIndex","column","squareIndex","square","numbers","i","includes"],"mappings":";;AAAA,SAAQA,OAAR,EAAiBC,OAAjB,EAA0BC,UAA1B,QAA2C,4BAA3C,C,CACA;;IAEMC,iB;;;;;;;WACF,mBAAUC,IAAV,EAAgB;AACZ,aAAO,KAAKC,SAAL,CAAeD,IAAf,KAAwB,KAAKE,YAAL,CAAkBF,IAAlB,CAAxB,IAAmD,KAAKG,YAAL,CAAkBH,IAAlB,CAA1D;AACH;;;WAED,mBAAUA,IAAV,EAAgB;AACZ,WAAK,IAAII,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,CAAlC,EAAqCA,QAAQ,EAA7C,EAAiD;AAC7C,YAAIC,GAAG,GAAGT,OAAO,CAACI,IAAD,EAAOI,QAAP,CAAjB;;AACA,YAAI,CAAC,KAAKE,iBAAL,CAAuBD,GAAvB,CAAL,EAAkC;AAAE,iBAAO,KAAP;AAAc;AACrD;;AACD,aAAO,IAAP;AACH;;;WAED,sBAAaL,IAAb,EAAmB;AACf,WAAK,IAAIO,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,CAAxC,EAA2CA,WAAW,EAAtD,EAA0D;AACtD,YAAIC,MAAM,GAAGX,OAAO,CAACG,IAAD,EAAOO,WAAP,CAApB;;AACA,YAAI,CAAC,KAAKD,iBAAL,CAAuBE,MAAvB,CAAL,EAAqC;AAAE,iBAAO,KAAP;AAAc;AACxD;;AACD,aAAO,IAAP;AACH;;;WAED,sBAAaR,IAAb,EAAmB;AACf,WAAK,IAAIS,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAG,CAAxC,EAA2CA,WAAW,EAAtD,EAA0D;AACtD,YAAIC,MAAM,GAAGZ,UAAU,CAACE,IAAD,EAAOS,WAAP,CAAvB;;AACA,YAAI,CAAC,KAAKH,iBAAL,CAAuBI,MAAvB,CAAL,EAAqC;AAAE,iBAAO,KAAP;AAAc;AACxD;;AACD,aAAO,IAAP;AACH;;;WAED,2BAAkBC,OAAlB,EAA2B;AACvB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,YAAI,CAACD,OAAO,CAACE,QAAR,CAAiBD,CAAjB,CAAL,EAA0B;AAAE,iBAAO,KAAP;AAAc;AAC7C;;AACD,aAAO,IAAP;AACH;;;;;;AAGL,eAAeb,iBAAf","sourcesContent":["import {get_row, get_col, get_square} from '../common/helper_functions';\n// 'checkGrid should be called - outputs a boolean confirmation if the sudoku grid meets completion criteria.\n\nclass IsSolutionCorrect {\n    checkGrid(grid) {\n        return this.checkRows(grid) && this.checkColumns(grid) && this.checkSquares(grid);\n    }\n    \n    checkRows(grid) {\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\n            let row = get_row(grid, rowIndex);\n            if (!this.containsOneToNine(row)) { return false }\n        }\n        return true;\n    }\n    \n    checkColumns(grid) {\n        for (let columnIndex = 0; columnIndex < 9; columnIndex++) {\n            let column = get_col(grid, columnIndex);\n            if (!this.containsOneToNine(column)) { return false }\n        }\n        return true;\n    }\n    \n    checkSquares(grid) {\n        for (let squareIndex = 0; squareIndex < 9; squareIndex++) {\n            let square = get_square(grid, squareIndex)\n            if (!this.containsOneToNine(square)) { return false }\n        }\n        return true;\n    }\n    \n    containsOneToNine(numbers) {\n        for (let i = 1; i <= 9; i++) {\n            if (!numbers.includes(i)) { return false }\n        }\n        return true;\n    }\n}\n\nexport default IsSolutionCorrect"]},"metadata":{},"sourceType":"module"}