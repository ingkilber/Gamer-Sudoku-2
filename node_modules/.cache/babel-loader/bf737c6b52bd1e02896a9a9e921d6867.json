{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(range);\n\nexport function clone_deep(grid) {\n  var gridClone = [];\n\n  var _iterator = _createForOfIteratorHelper(grid),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var row = _step.value;\n      gridClone.push(_toConsumableArray(row));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return gridClone;\n}\nexport function get_row(grid, rowIndex) {\n  return grid.slice(rowIndex * 9, rowIndex * 9 + 9);\n}\nexport function get_col(grid, columnIndex) {\n  var column = [];\n\n  for (var index = columnIndex; index < 81; index += 9) {\n    column.push(grid[index]);\n  }\n\n  return column;\n}\nexport function get_square(grid, squareIndex) {\n  var square = [];\n\n  for (var row = 0; row < 3; row++) {\n    var start = Math.floor(squareIndex / 3) * 27 + squareIndex % 3 * 3 + row * 9;\n    square.push.apply(square, _toConsumableArray(grid.slice(start, start + 3)));\n  }\n\n  return square;\n}\nexport function range(start, end) {\n  var i;\n  return _regeneratorRuntime.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          i = start;\n\n        case 1:\n          if (!(i < end)) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return i;\n\n        case 4:\n          i++;\n          _context.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["C:/Users/alons/OneDrive/Documentos/Todos los proyectos descargados/react-sudoku-master/src/common/helper_functions.js"],"names":["range","clone_deep","grid","gridClone","row","push","get_row","rowIndex","slice","get_col","columnIndex","column","index","get_square","squareIndex","square","start","Math","floor","end","i"],"mappings":";;;;oDA8BiBA,K;;AA7BjB,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC7B,MAAIC,SAAS,GAAG,EAAhB;;AAD6B,6CAEbD,IAFa;AAAA;;AAAA;AAE7B,wDAAsB;AAAA,UAAbE,GAAa;AAClBD,MAAAA,SAAS,CAACE,IAAV,oBAAmBD,GAAnB;AACH;AAJ4B;AAAA;AAAA;AAAA;AAAA;;AAK7B,SAAOD,SAAP;AACH;AAED,OAAO,SAASG,OAAT,CAAiBJ,IAAjB,EAAuBK,QAAvB,EAAiC;AACpC,SAAOL,IAAI,CAACM,KAAL,CAAWD,QAAQ,GAAG,CAAtB,EAAyBA,QAAQ,GAAG,CAAX,GAAe,CAAxC,CAAP;AACH;AAED,OAAO,SAASE,OAAT,CAAiBP,IAAjB,EAAuBQ,WAAvB,EAAoC;AACvC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,KAAK,GAAGF,WAAjB,EAA8BE,KAAK,GAAG,EAAtC,EAA0CA,KAAK,IAAI,CAAnD,EAAsD;AAClDD,IAAAA,MAAM,CAACN,IAAP,CAAYH,IAAI,CAACU,KAAD,CAAhB;AACH;;AACD,SAAOD,MAAP;AACH;AAED,OAAO,SAASE,UAAT,CAAoBX,IAApB,EAA0BY,WAA1B,EAAuC;AAC1C,MAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIX,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAC9B,QAAIY,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAG,CAAzB,IAA8B,EAA9B,GAAmCA,WAAW,GAAG,CAAd,GAAkB,CAArD,GAAyDV,GAAG,GAAG,CAA3E;AACAW,IAAAA,MAAM,CAACV,IAAP,OAAAU,MAAM,qBAASb,IAAI,CAACM,KAAL,CAAWQ,KAAX,EAAkBA,KAAK,GAAG,CAA1B,CAAT,EAAN;AACH;;AACD,SAAOD,MAAP;AACH;AAED,OAAO,SAAUf,KAAV,CAAgBgB,KAAhB,EAAuBG,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,CADN,GACUJ,KADV;;AAAA;AAAA,gBACiBI,CAAC,GAAGD,GADrB;AAAA;AAAA;AAAA;;AAAA;AAEC,iBAAMC,CAAN;;AAFD;AAC0BA,UAAAA,CAAC,EAD3B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nexport function clone_deep(grid) {\n    let gridClone = [];\n    for (let row of grid) {\n        gridClone.push([...row]);\n    }\n    return gridClone;\n}\n\nexport function get_row(grid, rowIndex) {\n    return grid.slice(rowIndex * 9, rowIndex * 9 + 9);\n}\n\nexport function get_col(grid, columnIndex) {\n    let column = []\n    for (let index = columnIndex; index < 81; index += 9) {\n        column.push(grid[index])\n    }\n    return column\n}\n\nexport function get_square(grid, squareIndex) {\n    const square = [];\n    for (let row = 0; row < 3; row++) {\n        let start = Math.floor(squareIndex / 3) * 27 + squareIndex % 3 * 3 + row * 9;\n        square.push(...grid.slice(start, start + 3));\n    }\n    return square\n}\n\nexport function* range(start, end) {\n    for (let i = start; i < end; i++) {\n        yield i;\n    }\n}"]},"metadata":{},"sourceType":"module"}