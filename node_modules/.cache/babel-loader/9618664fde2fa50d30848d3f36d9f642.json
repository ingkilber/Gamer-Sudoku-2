{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\alons\\\\OneDrive\\\\Documentos\\\\Todos los proyectos descargados\\\\react-sudoku-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { get_row, get_col, get_square, range } from '../common/helper_functions';\nexport function CalculateOptions(grid) {\n  var options = [];\n\n  var _iterator = _createForOfIteratorHelper(range(0, 9)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var rowIndex = _step.value;\n      var row = get_row(grid, rowIndex); // whole row\n\n      var _iterator2 = _createForOfIteratorHelper(range(0, 9)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var colIndex = _step2.value;\n          var index = Number(rowIndex) * 9 + Number(colIndex);\n\n          if (grid[index] === \"\") {\n            var col = get_col(grid, colIndex); // whole column\n\n            var sqIndex = Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3);\n            var sqr = get_square(grid, sqIndex); // whole square\n\n            var concatGrps = [].concat(row).concat(col).concat(sqr);\n            options[index] = checkOptions(concatGrps); //needs to be array of options\n          } else {\n            options[index] = [];\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  ;\n  return options;\n} // assumes possible values are 1 - 9\n\nfunction checkOptions(concatGrps) {\n  var possibleOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var foundOptions = [];\n\n  for (var _i = 0, _possibleOptions = possibleOptions; _i < _possibleOptions.length; _i++) {\n    var option = _possibleOptions[_i];\n\n    if (!concatGrps.includes(option)) {\n      foundOptions.push(option);\n    }\n  }\n\n  return foundOptions;\n}\n\nexport default CalculateOptions;","map":{"version":3,"sources":["C:/Users/alons/OneDrive/Documentos/Todos los proyectos descargados/react-sudoku-master/src/components/CalculateOptions.js"],"names":["get_row","get_col","get_square","range","CalculateOptions","grid","options","rowIndex","row","colIndex","index","Number","col","sqIndex","Math","floor","sqr","concatGrps","concat","checkOptions","possibleOptions","foundOptions","option","includes","push"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,KAAvC,QAAmD,4BAAnD;AAEA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AACrC,MAAMC,OAAO,GAAG,EAAhB;;AADqC,6CAGhBH,KAAK,CAAC,CAAD,EAAG,CAAH,CAHW;AAAA;;AAAA;AAGrC,wDAAiC;AAAA,UAAxBI,QAAwB;AAC/B,UAAIC,GAAG,GAAGR,OAAO,CAACK,IAAD,EAAOE,QAAP,CAAjB,CAD+B,CACI;;AADJ,kDAGVJ,KAAK,CAAC,CAAD,EAAI,CAAJ,CAHK;AAAA;;AAAA;AAG/B,+DAAkC;AAAA,cAAzBM,QAAyB;AAChC,cAAIC,KAAK,GAAGC,MAAM,CAACJ,QAAD,CAAN,GAAmB,CAAnB,GAAuBI,MAAM,CAACF,QAAD,CAAzC;;AACA,cAAIJ,IAAI,CAACK,KAAD,CAAJ,KAAgB,EAApB,EAAwB;AACtB,gBAAIE,GAAG,GAAGX,OAAO,CAACI,IAAD,EAAOI,QAAP,CAAjB,CADsB,CACa;;AACnC,gBAAII,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,QAAQ,GAAG,CAAtB,IAA2B,CAA3B,GAA+BO,IAAI,CAACC,KAAL,CAAWN,QAAQ,GAAG,CAAtB,CAA7C;AACA,gBAAIO,GAAG,GAAGd,UAAU,CAACG,IAAD,EAAOQ,OAAP,CAApB,CAHsB,CAGe;;AAErC,gBAAII,UAAU,GAAG,GAAGC,MAAH,CAAUV,GAAV,EAAeU,MAAf,CAAsBN,GAAtB,EAA2BM,MAA3B,CAAkCF,GAAlC,CAAjB;AAEAV,YAAAA,OAAO,CAACI,KAAD,CAAP,GAAiBS,YAAY,CAACF,UAAD,CAA7B,CAPsB,CAOqB;AAE5C,WATD,MAUK;AACHX,YAAAA,OAAO,CAACI,KAAD,CAAP,GAAiB,EAAjB;AACD;AACF;AAlB8B;AAAA;AAAA;AAAA;AAAA;AAmBhC;AAtBoC;AAAA;AAAA;AAAA;AAAA;;AAsBpC;AAED,SAAOJ,OAAP;AACD,C,CAED;;AACA,SAASa,YAAT,CAAsBF,UAAtB,EAAkC;AAChC,MAAIG,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAtB;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,sCAAmBD,eAAnB,sCAAoC;AAA/B,QAAIE,MAAM,uBAAV;;AACH,QAAI,CAACL,UAAU,CAACM,QAAX,CAAoBD,MAApB,CAAL,EAAkC;AAChCD,MAAAA,YAAY,CAACG,IAAb,CAAkBF,MAAlB;AACD;AACF;;AACD,SAAOD,YAAP;AACD;;AAED,eAAejB,gBAAf","sourcesContent":["import { get_row, get_col, get_square, range} from '../common/helper_functions';\n\nexport function CalculateOptions(grid) {\n  const options = [];\n\n  for (let rowIndex of range(0,9)) {\n    let row = get_row(grid, rowIndex); // whole row\n\n    for (let colIndex of range(0, 9)) {\n      let index = Number(rowIndex) * 9 + Number(colIndex)\n      if (grid[index] === \"\") {\n        let col = get_col(grid, colIndex); // whole column\n        let sqIndex = Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3)\n        let sqr = get_square(grid, sqIndex); // whole square\n\n        let concatGrps = [].concat(row).concat(col).concat(sqr);\n\n        options[index] = checkOptions(concatGrps); //needs to be array of options\n\n      }\n      else {\n        options[index] = [];\n      }\n    }\n  };\n\n  return options;\n}\n\n// assumes possible values are 1 - 9\nfunction checkOptions(concatGrps) {\n  let possibleOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let foundOptions = [];\n\n  for (let option of possibleOptions) {\n    if (!concatGrps.includes(option)) {\n      foundOptions.push(option);\n    }\n  }\n  return foundOptions;\n}\n\nexport default CalculateOptions;\n"]},"metadata":{},"sourceType":"module"}